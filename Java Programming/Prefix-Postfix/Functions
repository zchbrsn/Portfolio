//Student: Zachary Burson
//Course: UMGC CMSC350
//Assignment: Project 1
//Date: 27 Mar 2021
///Functions for converting postfix to prefix and prefix to postfix

package project.pkg1;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.EmptyStackException;
import java.util.Stack;
import javax.swing.JOptionPane;

public class Functions implements ActionListener {
    
    static boolean isOperator(char op) {
        switch (op) {
            case '+', '-', '*', '/', '^' -> {
                return true;
            }
        }
        return false;
    }
    
    public static String preFix(String expression) {
        
        Stack<String> operand = new Stack<>();
        int length = expression.length();
        String prefixExpression = "";
        
        try {
            for (int i = 0; i < length; i++) {
                if (Character.isWhitespace(expression.charAt(i)) == true ) {
                }
                else if (!isOperator(expression.charAt(i))) {
                    operand.push(Character.toString(expression.charAt(i)));
                }
                else if (isOperator(expression.charAt(i))) {
                    String op1 = (String) operand.peek();
                    operand.pop();
                    String op2 = (String) operand.peek();
                    operand.pop();
                    String temp = " " + Character.toString(expression.charAt(i)) + " " + op1 + " " + op2;
                    operand.push(temp);
                }
            }
            prefixExpression = operand.pop();
            if (!operand.isEmpty()) {
                JOptionPane.showMessageDialog(null, "The size of the stack is " + operand.size());
            }
        } catch (EmptyStackException e) {
            JOptionPane.showMessageDialog(null, "The stack is empty", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return prefixExpression;
    }

    public static String postFix(String expression) {
        
        Stack<String> operand = new Stack<>();
        int length = expression.length();
        String postfixExpression = "";
        
        try {
            for(int i = length-1; i >= 0; i--) {
            if (Character.isWhitespace(expression.charAt(i)) == true ) {
            }
            else if (isOperator(expression.charAt(i))) {
                String op1 = (String) operand.pop();
                String op2 = (String) operand.pop();
                String temp = " " + op1 + " " + op2 + " " + Character.toString(expression.charAt(i));
                operand.push(temp);
            }
            else {
                operand.push(Character.toString(expression.charAt(i)));
            }
            }
            postfixExpression = operand.pop();
            if (!operand.isEmpty()) {
                JOptionPane.showMessageDialog(null, "The size of the stack is " + operand.size());
            }
        } catch (EmptyStackException e) {
            JOptionPane.showMessageDialog(null, "The stack is empty", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return postfixExpression;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
